name: 'Check Environment Information'
description: 'Comprehensive system information check with structured output and error handling'

inputs:
  check-gpu:
    description: 'Whether to check GPU information'
    required: false
    default: 'true'
  check-docker:
    description: 'Whether to check Docker information'
    required: false
    default: 'true'
  fail-on-gpu-missing:
    description: 'Whether to fail if GPU is not detected'
    required: false
    default: 'false'
  enable-debug:
    description: 'Enable debug output'
    required: false
    default: 'false'


runs:
  using: "composite"
  steps:
    - name: Install required tools
      shell: bash
      run: |
        echo "INFO: Installing system information tools..."
        
        # Update package lists
        if command -v apt-get &> /dev/null; then
          sudo apt-get update -qq
          sudo apt-get install -y -qq pciutils lshw curl jq || echo "WARNING: Some tools failed to install"
        elif command -v brew &> /dev/null; then
          brew install pciutils jq || echo "WARNING: Some tools failed to install"
        else
          echo "WARNING: Package manager not recognized, some tools may not be available"
        fi

    - name: Collect system information
      id: system-info
      shell: bash
      run: |
        echo "INFO: Collecting system information..."
        
        # OS Information
        echo "=== Operating System Information ==="
        OS_NAME=$(uname -s)
        OS_RELEASE=""
        OS_VERSION=""
        
        if [ -f /etc/os-release ]; then
          source /etc/os-release
          OS_RELEASE="$NAME"
          OS_VERSION="$VERSION"
          echo "OS: $NAME $VERSION"
          cat /etc/os-release
        else
          OS_RELEASE="$(uname -s)"
          OS_VERSION="$(uname -r)"
          echo "OS: $OS_RELEASE $OS_VERSION"
          uname -a
        fi
        
        echo "========== OS Information Summary =========="
        echo "OS Name: $OS_NAME"
        echo "OS Release: $OS_RELEASE"
        echo "OS Version: $OS_VERSION"
        echo "Architecture: $(uname -m)"
        echo "Kernel: $(uname -r)"
        echo "============================================="
        
        # CPU Information
        echo "=== CPU Information ==="
        CPU_COUNT=""
        CPU_MODEL=""
        
        if command -v lscpu &> /dev/null; then
          lscpu
          CPU_COUNT=$(lscpu | grep "^CPU(s):" | awk '{print $2}')
          CPU_MODEL=$(lscpu | grep "Model name:" | cut -d':' -f2 | xargs)
        elif command -v sysctl &> /dev/null; then
          CPU_COUNT=$(sysctl -n hw.ncpu 2>/dev/null || echo "unknown")
          CPU_MODEL=$(sysctl -n machdep.cpu.brand_string 2>/dev/null || echo "unknown")
          echo "CPU Count: $CPU_COUNT"
          echo "CPU Model: $CPU_MODEL"
        else
          CPU_COUNT="unknown"
          CPU_MODEL="unknown"
          echo "CPU information tools not available"
        fi
        
        echo "========== CPU Information Summary =========="
        echo "CPU Count: $CPU_COUNT"
        echo "CPU Model: $CPU_MODEL"
        echo "=============================================="
        
        # Memory Information
        echo "=== Memory Information ==="
        TOTAL_MEM=""
        AVAILABLE_MEM=""
        
        if command -v free &> /dev/null; then
          free -h
          TOTAL_MEM=$(free -b | awk 'NR==2{print $2}')
          AVAILABLE_MEM=$(free -b | awk 'NR==2{print $7}')
        elif command -v vm_stat &> /dev/null; then
          vm_stat
          TOTAL_MEM=$(sysctl -n hw.memsize 2>/dev/null || echo "unknown")
          AVAILABLE_MEM="unknown"
        else
          TOTAL_MEM="unknown"
          AVAILABLE_MEM="unknown"
          echo "Memory information tools not available"
        fi
        
        echo "========== Memory Information Summary =========="
        if [ "$TOTAL_MEM" != "unknown" ] && [ -n "$TOTAL_MEM" ]; then
          echo "Total Memory: $(numfmt --to=iec --suffix=B $TOTAL_MEM 2>/dev/null || echo $TOTAL_MEM)"
        else
          echo "Total Memory: $TOTAL_MEM"
        fi
        if [ "$AVAILABLE_MEM" != "unknown" ] && [ -n "$AVAILABLE_MEM" ]; then
          echo "Available Memory: $(numfmt --to=iec --suffix=B $AVAILABLE_MEM 2>/dev/null || echo $AVAILABLE_MEM)"
        else
          echo "Available Memory: $AVAILABLE_MEM"
        fi
        echo "================================================"
        
        echo "=== Disk Space ==="
        df -h

    - name: Check GPU information
      id: gpu-info
      if: inputs.check-gpu == 'true'
      shell: bash
      run: |
        echo "INFO: Checking GPU information..."
        
        GPU_AVAILABLE="false"
        GPU_COUNT="0"
        GPU_MODELS=""
        NVIDIA_DRIVER=""
        
        # Check PCI devices for GPU
        echo "=== PCI GPU Devices ==="
        if command -v lspci &> /dev/null; then
          GPU_DEVICES=$(lspci | grep -i vga || echo "No VGA devices found")
          echo "$GPU_DEVICES"
          
          if echo "$GPU_DEVICES" | grep -q .; then
            GPU_AVAILABLE="true"
            GPU_COUNT=$(echo "$GPU_DEVICES" | wc -l)
            GPU_MODELS=$(echo "$GPU_DEVICES" | cut -d':' -f3 | tr '\n' ';')
          fi
        else
          echo "WARNING: lspci not available, cannot check PCI devices"
        fi
        
        # Check NVIDIA GPU specifically
        echo "=== NVIDIA GPU Information ==="
        if command -v nvidia-smi &> /dev/null; then
          if nvidia-smi &> /dev/null; then
            echo "SUCCESS: NVIDIA GPU detected"
            nvidia-smi
            GPU_AVAILABLE="true"
            NVIDIA_DRIVER=$(nvidia-smi --query-gpu=driver_version --format=csv,noheader,nounits | head -1)
          else
            echo "WARNING: nvidia-smi failed to run"
            if [ "${{ inputs.fail-on-gpu-missing }}" = "true" ]; then
              echo "ERROR: GPU required but nvidia-smi failed"
              exit 1
            fi
          fi
        else
          echo "INFO: nvidia-smi not found - NVIDIA GPU not detected or drivers not installed"
          if [ "${{ inputs.fail-on-gpu-missing }}" = "true" ]; then
            echo "ERROR: GPU required but not detected"
            exit 1
          fi
        fi
        
        # Check other GPU types
        echo "=== Other GPU Information ==="
        if command -v clinfo &> /dev/null; then
          echo "OpenCL devices:"
          clinfo | grep -i "device name" || echo "No OpenCL devices found"
        else
          echo "INFO: clinfo not available"
        fi
        
        echo "========== GPU Information Summary =========="
        echo "GPU Available: $GPU_AVAILABLE"
        if [ "$GPU_AVAILABLE" = "true" ]; then
          echo "GPU Count: $GPU_COUNT"
          echo "GPU Models: $GPU_MODELS"
          if [ -n "$NVIDIA_DRIVER" ] && [ "$NVIDIA_DRIVER" != "unknown" ]; then
            echo "NVIDIA Driver Version: $NVIDIA_DRIVER"
          fi
        else
          echo "No GPU detected or GPU tools not available"
        fi
        echo "=============================================="

    - name: Check CUDA information
      id: cuda-info
      if: inputs.check-gpu == 'true'
      shell: bash
      run: |
        echo "INFO: Checking CUDA information..."
        
        CUDA_AVAILABLE="false"
        CUDA_VERSION=""
        CUDNN_VERSION=""
        
        # Check CUDA installation
        echo "=== CUDA Version ==="
        if command -v nvcc &> /dev/null; then
          nvcc --version
          CUDA_AVAILABLE="true"
          CUDA_VERSION=$(nvcc --version | grep -oP 'release \K[0-9.]+')
        else
          echo "INFO: CUDA compiler (nvcc) not found"
        fi
        
        # Check cuDNN
        echo "=== cuDNN Version ==="
        CUDNN_HEADER_PATHS=(
          "/usr/local/cuda/include/cudnn_version.h"
          "/usr/include/cudnn_version.h"
          "/opt/cuda/include/cudnn_version.h"
        )
        
        for header_path in "${CUDNN_HEADER_PATHS[@]}"; do
          if [ -f "$header_path" ]; then
            echo "Found cuDNN header at: $header_path"
            MAJOR=$(grep -E "define CUDNN_MAJOR" "$header_path" | awk '{print $3}')
            MINOR=$(grep -E "define CUDNN_MINOR" "$header_path" | awk '{print $3}')
            PATCH=$(grep -E "define CUDNN_PATCHLEVEL" "$header_path" | awk '{print $3}')
            if [ -n "$MAJOR" ] && [ -n "$MINOR" ] && [ -n "$PATCH" ]; then
              CUDNN_VERSION="${MAJOR}.${MINOR}.${PATCH}"
              echo "cuDNN version: $CUDNN_VERSION"
            fi
            break
          fi
        done
        
        if [ -z "$CUDNN_VERSION" ]; then
          echo "INFO: cuDNN not found"
        fi
        
        echo "========== CUDA Information Summary =========="
        echo "CUDA Available: $CUDA_AVAILABLE"
        if [ "$CUDA_AVAILABLE" = "true" ] && [ -n "$CUDA_VERSION" ]; then
          echo "CUDA Version: $CUDA_VERSION"
        fi
        echo "=============================================="

    - name: Check Docker information
      id: docker-info
      if: inputs.check-docker == 'true'
      shell: bash
      run: |
        echo "INFO: Checking Docker information..."
        
        DOCKER_AVAILABLE="false"
        DOCKER_VERSION=""
        COMPOSE_VERSION=""
        
        # Check Docker installation
        echo "=== Docker Information ==="
        if command -v docker &> /dev/null; then
          if docker version &> /dev/null; then
            DOCKER_AVAILABLE="true"
            DOCKER_VERSION=$(docker version --format '{{.Server.Version}}' 2>/dev/null || echo "unknown")
            echo "SUCCESS: Docker is available"
            docker version
          else
            echo "WARNING: Docker command found but not working properly"
          fi
        else
          echo "INFO: Docker not found"
        fi
        
        # Check Docker Compose
        if [ "$DOCKER_AVAILABLE" = "true" ]; then
          echo "=== Docker Compose Information ==="
          if docker compose version &> /dev/null; then
            COMPOSE_VERSION=$(docker compose version --short 2>/dev/null || echo "unknown")
            echo "Docker Compose version: $COMPOSE_VERSION"
          elif command -v docker compose &> /dev/null; then
            COMPOSE_VERSION=$(docker compose version --short 2>/dev/null || echo "unknown")
            echo "Docker Compose (standalone) version: $COMPOSE_VERSION"
          else
            echo "INFO: Docker Compose not found"
          fi
          
          # Check running containers
          echo "=== Running Containers ==="
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" 2>/dev/null | head -10 || echo "No containers or Docker not accessible"
        fi
        
        echo "========== Docker Information Summary =========="
        echo "Docker Available: $DOCKER_AVAILABLE"
        if [ "$DOCKER_AVAILABLE" = "true" ]; then
          echo "Docker Version: $DOCKER_VERSION"
          echo "Docker Compose Version: $COMPOSE_VERSION"
        else
          echo "Docker is not available or not accessible"
        fi
        echo "================================================"

    - name: Final summary
      shell: bash
      run: |
        echo "================================================================"
        echo "              SYSTEM INFORMATION COLLECTION COMPLETE"
        echo "================================================================"
        echo "✅ All system information has been collected and logged above"
        echo "✅ OS, CPU, Memory, and Disk information: Available"
        
        if [ "${{ inputs.check-gpu }}" = "true" ]; then
          echo "✅ GPU and CUDA information: Checked"
        fi
        
        if [ "${{ inputs.check-docker }}" = "true" ]; then
          echo "✅ Docker information: Checked"
        fi
        
        echo "================================================================"
        echo "Review the detailed information in the logs above"
        echo "================================================================"

