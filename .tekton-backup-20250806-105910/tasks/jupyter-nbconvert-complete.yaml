apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: jupyter-nbconvert-complete
  namespace: tekton-pipelines
  labels:
    app.kubernetes.io/name: jupyter-nbconvert-complete
    app.kubernetes.io/component: tekton-task
    app.kubernetes.io/version: "1.0.0"
spec:
  description: |
    Converts Jupyter notebooks to HTML format.
    Based on step5-nbconvert-to-html from the reference workflow.
    
  params:
  - name: input-notebook-name
    type: string
    description: Name of the input notebook (with .ipynb extension)
  - name: output-html-name
    type: string
    description: Name of the output HTML file
    
  workspaces:
  - name: shared-storage
    description: Workspace containing notebooks and output directory
    
  steps:
  - name: convert-to-html
    image: nvcr.io/nvidia/rapidsai/notebooks:25.04-cuda12.8-py3.12
    securityContext:
      runAsUser: 0
    env:
    - name: INPUT_NOTEBOOK
      value: $(params.input-notebook-name)
    - name: OUTPUT_HTML
      value: $(params.output-html-name)
    script: |
      #!/bin/bash
      set -eu
      
      echo "üìÑ Step 5: Jupyter NBConvert to HTML"
      echo "===================================="
      
      cd "$(workspaces.shared-storage.path)"
      
      # Ensure jupyter and nbconvert are installed
      pip install --quiet --no-cache-dir jupyter nbconvert
      
      echo "Input notebook: ${INPUT_NOTEBOOK}"
      echo "Output HTML: ${OUTPUT_HTML}"
      
      # Check if input notebook exists
      if [ ! -f "${INPUT_NOTEBOOK}" ]; then
        echo "‚ùå ERROR: Input notebook not found: ${INPUT_NOTEBOOK}"
        echo "üìÇ Available files:"
        find . -name "*.ipynb" | head -10
        exit 1
      fi
      
      # Create output directory
      mkdir -p "$(dirname "${OUTPUT_HTML}")"
      
      # Convert notebook to HTML
      echo "üîÑ Converting notebook to HTML..."
      jupyter nbconvert \
        --to html \
        --output "${OUTPUT_HTML}" \
        "${INPUT_NOTEBOOK}" \
        --log-level INFO
      
      if [ -f "${OUTPUT_HTML}" ]; then
        size=$(du -h "${OUTPUT_HTML}" | cut -f1)
        echo "‚úÖ HTML conversion completed successfully!"
        echo "   Output file: ${OUTPUT_HTML}"
        echo "   File size: ${size}"
        
        # Copy to input directory for next steps
        mkdir -p input
        cp "${OUTPUT_HTML}" "input/"
        echo "üìã HTML copied to input directory for further processing"
      else
        echo "‚ùå HTML conversion failed"
        exit 1
      fi