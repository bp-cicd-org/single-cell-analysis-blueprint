apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: complete-scrna-analysis-workflow
  namespace: tekton-pipelines
  labels:
    app.kubernetes.io/name: complete-scrna-analysis-workflow
    app.kubernetes.io/component: tekton-pipeline
    app.kubernetes.io/version: "1.0.0"
    pipeline.tekton.dev/gpu-enabled: "true"
spec:
  description: |
    🚀 Complete RAPIDS SingleCell Analysis Workflow - All Notebooks
    
    This pipeline executes all 7 single-cell analysis notebooks in optimal order:
    - Sequential execution to avoid GPU memory conflicts
    - Hardware requirement validation for each notebook
    - Dependency management between notebooks
    - Comprehensive monitoring and reporting
    
    Execution Order:
    1. Basic Analysis (24GB GPU): 01, 02, 03, 06
    2. Large Scale Analysis (48GB+ GPU): 04, 07
    3. Multi-GPU Analysis (Multiple 80GB GPUs): 05
    
    Expected total execution time: 4-8 hours on 3x A100 80GB setup
    
  params:
  - name: pipeline-run-name
    type: string
    default: "complete-analysis-run"
    description: Unique name for this pipeline run
  - name: git-repo-url
    type: string
    default: "https://github.com/NVIDIA-AI-Blueprints/single-cell-analysis-blueprint.git"
    description: Git repository URL for the notebooks
  - name: skip-optional-notebooks
    type: string
    default: "false"
    description: Whether to skip optional notebooks if hardware requirements not met
  - name: continue-on-failure
    type: string
    default: "false"  
    description: Whether to continue pipeline execution if a notebook fails
  - name: cleanup-between-notebooks
    type: string
    default: "true"
    description: Whether to cleanup GPU memory between notebook executions
    
  workspaces:
  - name: shared-storage
    description: Shared workspace for all notebooks, data, and outputs
    
  tasks:
  
  # Stage 0: Environment Setup and Repository Clone
  - name: setup-environment
    taskSpec:
      workspaces:
      - name: shared-storage
      steps:
      - name: setup-workspace
        image: nvcr.io/nvidia/rapidsai/notebooks:25.04-cuda12.8-py3.12
        securityContext:
          runAsUser: 0
        script: |
          #!/bin/bash
          set -eu
          
          echo "🏗️  Setting up Complete Analysis Environment"
          echo "==========================================="
          
          cd "$(workspaces.shared-storage.path)"
          
          # Create directory structure
          mkdir -p {data,outputs,logs,artifacts,reports}
          
          # Set permissions
          chmod -R 777 .
          
          # Install core dependencies
          echo "📦 Installing core dependencies..."
          pip install --quiet --no-cache-dir --upgrade \
            jupyter papermill nbconvert \
            rapids-singlecell scanpy anndata \
            matplotlib seaborn plotly \
            scikit-learn umap-learn \
            dask dask-cuda \
            pytest pytest-html
            
          echo "✅ Environment setup completed"
    workspaces:
    - name: shared-storage
      workspace: shared-storage
      
  - name: clone-repository
    taskRef:
      name: safe-git-clone
    params:
    - name: git-repo-url
      value: $(params.git-repo-url)
    - name: workspace-subdir
      value: "single-cell-analysis-blueprint"
    runAfter: ["setup-environment"]
    workspaces:
    - name: source-workspace
      workspace: shared-storage
      
  # Stage 1: Basic Analysis Notebooks (24GB GPU requirement)
  - name: notebook-01-preprocessing
    taskRef:
      name: gpu-notebook-executor-task
    params:
    - name: notebook-name
      value: "01_scRNA_analysis_preprocessing"
    - name: min-gpu-memory-gb
      value: "24"
    - name: execution-timeout
      value: "7200"  # 2 hours
    - name: pipeline-run-name
      value: $(params.pipeline-run-name)
    runAfter: ["clone-repository"]
    workspaces:
    - name: shared-storage
      workspace: shared-storage
      
  - name: notebook-02-extended
    taskRef:
      name: gpu-notebook-executor-task
    params:
    - name: notebook-name
      value: "02_scRNA_analysis_extended"
    - name: min-gpu-memory-gb
      value: "24"
    - name: execution-timeout
      value: "5400"  # 1.5 hours
    - name: dependency-notebooks
      value: "01_scRNA_analysis_preprocessing"
    - name: pipeline-run-name
      value: $(params.pipeline-run-name)
    runAfter: ["notebook-01-preprocessing"]
    workspaces:
    - name: shared-storage
      workspace: shared-storage
      
  - name: notebook-03-pearson
    taskRef:
      name: gpu-notebook-executor-task
    params:
    - name: notebook-name
      value: "03_scRNA_analysis_with_pearson_residuals"
    - name: min-gpu-memory-gb
      value: "24"
    - name: execution-timeout
      value: "5400"  # 1.5 hours
    - name: pipeline-run-name
      value: $(params.pipeline-run-name)
    runAfter: ["notebook-02-extended"]
    workspaces:
    - name: shared-storage
      workspace: shared-storage
      
  - name: notebook-06-brain90k
    taskRef:
      name: gpu-notebook-executor-task
    params:
    - name: notebook-name
      value: "06_scRNA_analysis_90k_brain_example"
    - name: min-gpu-memory-gb
      value: "24"
    - name: execution-timeout
      value: "5400"  # 1.5 hours
    - name: pipeline-run-name
      value: $(params.pipeline-run-name)
    runAfter: ["notebook-03-pearson"]
    workspaces:
    - name: shared-storage
      workspace: shared-storage
      
  # Stage 2: Large Scale Analysis Notebooks (48GB+ GPU requirement)
  - name: notebook-04-dask
    taskRef:
      name: gpu-notebook-executor-task
    params:
    - name: notebook-name
      value: "04_scRNA_analysis_dask_out_of_core"
    - name: min-gpu-memory-gb
      value: "48"
    - name: execution-timeout
      value: "10800"  # 3 hours
    - name: pipeline-run-name
      value: $(params.pipeline-run-name)
    runAfter: ["notebook-06-brain90k"]
    workspaces:
    - name: shared-storage
      workspace: shared-storage
      
  - name: notebook-07-brain1m
    taskRef:
      name: gpu-notebook-executor-task
    params:
    - name: notebook-name
      value: "07_scRNA_analysis_1.3M_brain_example"
    - name: min-gpu-memory-gb
      value: "80"
    - name: execution-timeout
      value: "14400"  # 4 hours
    - name: pipeline-run-name
      value: $(params.pipeline-run-name)
    runAfter: ["notebook-04-dask"]
    workspaces:
    - name: shared-storage
      workspace: shared-storage
      
  # Stage 3: Multi-GPU Analysis (Requires multiple 80GB GPUs)
  - name: notebook-05-multigpu
    taskRef:
      name: gpu-notebook-executor-task
    params:
    - name: notebook-name
      value: "05_scRNA_analysis_multi_GPU"
    - name: min-gpu-memory-gb
      value: "160"  # Requires multiple GPUs
    - name: execution-timeout
      value: "14400"  # 4 hours
    - name: pipeline-run-name
      value: $(params.pipeline-run-name)
    runAfter: ["notebook-07-brain1m"]
    workspaces:
    - name: shared-storage
      workspace: shared-storage
      
  # Final Stage: Results Compilation and Reporting
  - name: generate-final-report
    taskSpec:
      params:
      - name: pipeline-run-name
        type: string
      workspaces:
      - name: shared-storage
      steps:
      - name: compile-results
        image: nvcr.io/nvidia/rapidsai/notebooks:25.04-cuda12.8-py3.12
        securityContext:
          runAsUser: 0
        env:
        - name: PIPELINE_RUN_NAME
          value: $(params.pipeline-run-name)
        script: |
          #!/bin/bash
          set -eu
          
          echo "📊 Generating Final Analysis Report"
          echo "=================================="
          
          cd "$(workspaces.shared-storage.path)"
          
          REPORT_FILE="reports/complete_analysis_report_$(date +%Y%m%d_%H%M%S).html"
          mkdir -p reports
          
          # Create comprehensive HTML report
          cat > "${REPORT_FILE}" << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>RAPIDS SingleCell Analysis - Complete Workflow Report</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  .header { background: #f0f8ff; padding: 20px; border-radius: 8px; }
                  .notebook { margin: 20px 0; padding: 15px; border-left: 4px solid #007acc; }
                  .success { border-color: #28a745; background: #f8fff8; }
                  .failed { border-color: #dc3545; background: #fff8f8; }
                  .skipped { border-color: #ffc107; background: #fffdf8; }
                  table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                  th, td { padding: 10px; text-align: left; border-bottom: 1px solid #ddd; }
                  th { background: #f5f5f5; }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>🚀 RAPIDS SingleCell Analysis - Complete Workflow Report</h1>
                  <p><strong>Pipeline Run:</strong> ${PIPELINE_RUN_NAME}</p>
                  <p><strong>Generated:</strong> $(date)</p>
                  <p><strong>System:</strong> $(nvidia-smi --query-gpu=name,memory.total --format=csv,noheader | head -1)</p>
              </div>
              
              <h2>📋 Execution Summary</h2>
              <table>
                  <tr><th>Notebook</th><th>Status</th><th>Execution Time</th><th>GPU Memory Used</th><th>Output Size</th></tr>
          EOF
          
          # Add each notebook's results to the report
          NOTEBOOKS=(
            "01_scRNA_analysis_preprocessing"
            "02_scRNA_analysis_extended" 
            "03_scRNA_analysis_with_pearson_residuals"
            "06_scRNA_analysis_90k_brain_example"
            "04_scRNA_analysis_dask_out_of_core"
            "07_scRNA_analysis_1.3M_brain_example"
            "05_scRNA_analysis_multi_GPU"
          )
          
          TOTAL_SUCCESS=0
          TOTAL_FAILED=0
          TOTAL_SKIPPED=0
          
          for notebook in "${NOTEBOOKS[@]}"; do
            OUTPUT_FILE="outputs/${notebook}.executed.ipynb"
            if [ -f "${OUTPUT_FILE}" ]; then
              SIZE=$(du -h "${OUTPUT_FILE}" | cut -f1)
              STATUS="✅ Success"
              TOTAL_SUCCESS=$((TOTAL_SUCCESS + 1))
              STATUS_CLASS="success"
            else
              SIZE="N/A"
              STATUS="❌ Failed/Skipped"
              TOTAL_FAILED=$((TOTAL_FAILED + 1))
              STATUS_CLASS="failed"
            fi
            
            cat >> "${REPORT_FILE}" << EOF
                  <tr class="${STATUS_CLASS}">
                      <td>${notebook}</td>
                      <td>${STATUS}</td>
                      <td>N/A</td>
                      <td>N/A</td>
                      <td>${SIZE}</td>
                  </tr>
          EOF
          done
          
          # Complete the HTML report
          cat >> "${REPORT_FILE}" << EOF
              </table>
              
              <h2>📊 Statistics</h2>
              <ul>
                  <li><strong>Successful Notebooks:</strong> ${TOTAL_SUCCESS}</li>
                  <li><strong>Failed/Skipped Notebooks:</strong> ${TOTAL_FAILED}</li>
                  <li><strong>Total Notebooks:</strong> 7</li>
                  <li><strong>Success Rate:</strong> $((TOTAL_SUCCESS * 100 / 7))%</li>
              </ul>
              
              <h2>📁 Generated Outputs</h2>
              <ul>
          EOF
          
          # List all generated outputs
          find outputs -name "*.executed.ipynb" -o -name "*.html" | while read file; do
            echo "                  <li><a href=\"${file}\">${file}</a></li>" >> "${REPORT_FILE}"
          done
          
          cat >> "${REPORT_FILE}" << 'EOF'
              </ul>
              
              <h2>🔗 Resources</h2>
              <ul>
                  <li><a href="https://github.com/NVIDIA-AI-Blueprints/single-cell-analysis-blueprint">GitHub Repository</a></li>
                  <li><a href="https://rapids-singlecell.readthedocs.io/">RAPIDS-singlecell Documentation</a></li>
                  <li><a href="https://scverse.org/">scverse Community</a></li>
              </ul>
              
              <footer style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #ddd; color: #666;">
                  <p>Generated by RAPIDS SingleCell Analysis Tekton Pipeline</p>
              </footer>
          </body>
          </html>
          EOF
          
          echo "✅ Final report generated: ${REPORT_FILE}"
          
          # Generate summary statistics
          echo "📊 Pipeline Execution Summary:"
          echo "   Successful notebooks: ${TOTAL_SUCCESS}/7"
          echo "   Failed/Skipped notebooks: ${TOTAL_FAILED}/7"
          echo "   Success rate: $((TOTAL_SUCCESS * 100 / 7))%"
          echo "   Report location: ${REPORT_FILE}"
          
    params:
    - name: pipeline-run-name
      value: $(params.pipeline-run-name)
    runAfter: ["notebook-05-multigpu"]
    workspaces:
    - name: shared-storage
      workspace: shared-storage